<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/internal/api/middleware/jwt_middleware.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/internal/api/middleware/jwt_middleware.go" />
              <option name="updatedContent" value="package middleware&#10;&#10;import (&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;os&quot;&#10;&#9;&quot;strings&quot;&#10;&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/golang-jwt/jwt/v5&quot;&#10;)&#10;&#10;func JWTAuthMiddleware() gin.HandlerFunc {&#10;&#9;return func(c *gin.Context) {&#10;&#9;&#9;authHeader := c.GetHeader(&quot;Authorization&quot;)&#10;&#9;&#9;if authHeader == &quot;&quot; {&#10;&#9;&#9;&#9;c.JSON(http.StatusUnauthorized, gin.H{&quot;message&quot;: &quot;Authorization header missing&quot;, &quot;code&quot;: 401})&#10;&#9;&#9;&#9;c.Abort()&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;parts := strings.SplitN(authHeader, &quot; &quot;, 2)&#10;&#9;&#9;if len(parts) != 2 || parts[0] != &quot;Bearer&quot; {&#10;&#9;&#9;&#9;c.JSON(http.StatusUnauthorized, gin.H{&quot;message&quot;: &quot;Authorization header format must be Bearer {token}&quot;, &quot;code&quot;: 401})&#10;&#9;&#9;&#9;c.Abort()&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;jwtSecret := []byte(os.Getenv(&quot;JWT_SECRET&quot;))&#10;&#9;&#9;token, err := jwt.Parse(parts[1], func(token *jwt.Token) (interface{}, error) {&#10;&#9;&#9;&#9;return jwtSecret, nil&#10;&#9;&#9;})&#10;&#9;&#9;if err != nil || !token.Valid {&#10;&#9;&#9;&#9;c.JSON(http.StatusUnauthorized, gin.H{&quot;message&quot;: &quot;Invalid or expired token&quot;, &quot;code&quot;: 401})&#10;&#9;&#9;&#9;c.Abort()&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;c.Next()&#10;&#9;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/internal/api/router/auth_routes.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/internal/api/router/auth_routes.go" />
              <option name="originalContent" value="package router&#10;&#10;import (&#10;&#9;&quot;AuthService/internal/api/controller&quot;&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;)&#10;&#10;func RegisterAuthRoute(parentGrp *gin.RouterGroup, ctl *controller.AuthController) {&#10;&#9;authGroup := parentGrp.Group(&quot;/auth&quot;)&#10;&#9;{&#10;&#9;&#9;authGroup.GET(&quot;/account&quot;, ctl.GetAllAccountsHandler)&#10;&#9;&#9;authGroup.POST(&quot;/login&quot;, ctl.LoginHandler)&#10;&#9;&#9;authGroup.POST(&quot;/register&quot;, ctl.RegisterHandler)&#10;&#9;&#9;//parentGrp.POST(&quot;/logout&quot;, ctl.)&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package router&#10;&#10;import (&#10;&#9;&quot;AuthService/internal/api/controller&quot;&#10;&#9;&quot;AuthService/internal/api/middleware&quot;&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;)&#10;&#10;func RegisterAuthRoute(parentGrp *gin.RouterGroup, ctl *controller.AuthController) {&#10;&#9;authGroup := parentGrp.Group(&quot;/auth&quot;)&#10;&#9;{&#10;&#9;&#9;authGroup.GET(&quot;/account&quot;, middleware.JWTAuthMiddleware(), ctl.GetAllAccountsHandler)&#10;&#9;&#9;authGroup.POST(&quot;/login&quot;, ctl.LoginHandler)&#10;&#9;&#9;authGroup.POST(&quot;/register&quot;, ctl.RegisterHandler)&#10;&#9;&#9;//parentGrp.POST(&quot;/logout&quot;, ctl.)&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>